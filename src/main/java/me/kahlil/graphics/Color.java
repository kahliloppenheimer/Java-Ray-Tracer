package me.kahlil.graphics;

import java.awt.color.ColorSpace;

/**
 * Created by kahliloppenheimer on 9/7/15.
 */
public class Color extends java.awt.Color {

  /**
   * The color white.  In the default sRGB space.
   */
  public final static Color white = new Color(255, 255, 255);

  /**
   * The color white.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color WHITE = white;

  /**
   * The color light gray.  In the default sRGB space.
   */
  public final static Color lightGray = new Color(192, 192, 192);

  /**
   * The color light gray.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color LIGHT_GRAY = lightGray;

  /**
   * The color gray.  In the default sRGB space.
   */
  public final static Color gray = new Color(128, 128, 128);

  /**
   * The color gray.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color GRAY = gray;

  /**
   * The color dark gray.  In the default sRGB space.
   */
  public final static Color darkGray = new Color(64, 64, 64);

  /**
   * The color dark gray.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color DARK_GRAY = darkGray;

  /**
   * The color black.  In the default sRGB space.
   */
  public final static Color black = new Color(0, 0, 0);

  /**
   * The color black.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color BLACK = black;

  /**
   * The color red in the default sRGB space.
   */
  public final static Color RED = new Color(255, 0, 0);

  /**
   * The color pink.  In the default sRGB space.
   */
  public final static Color pink = new Color(255, 175, 175);

  /**
   * The color pink.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color PINK = pink;

  /**
   * The color orange.  In the default sRGB space.
   */
  public final static Color orange = new Color(255, 200, 0);

  /**
   * The color orange.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color ORANGE = orange;

  /**
   * The color yellow.  In the default sRGB space.
   */
  public final static Color yellow = new Color(255, 255, 0);

  /**
   * The color yellow.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color YELLOW = yellow;

  /**
   * The color green in the default sRGB space.
   */
  public final static Color GREEN = new Color(0, 255, 0);

  /**
   * The color magenta.  In the default sRGB space.
   */
  public final static Color magenta = new Color(255, 0, 255);

  /**
   * The color magenta.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color MAGENTA = magenta;

  /**
   * The color cyan.  In the default sRGB space.
   */
  public final static Color cyan = new Color(0, 255, 255);

  /**
   * The color cyan.  In the default sRGB space.
   *
   * @since 1.4
   */
  public final static Color CYAN = cyan;

  /**
   * The color blue in the default sRGB space.
   */
  public final static Color BLUE = new Color(0, 0, 255);

  public Color(int r, int g, int b) {
    super(r, g, b);
  }

  public Color(int r, int g, int b, int a) {
    super(r, g, b, a);
  }

  public Color(int rgb) {
    super(rgb);
  }

  public Color(int rgba, boolean hasalpha) {
    super(rgba, hasalpha);
  }

  public Color(float r, float g, float b) {
    super(r, g, b);
  }

  public Color(float r, float g, float b, float a) {
    super(r, g, b, a);
  }

  public Color(ColorSpace cspace, float[] components, float alpha) {
    super(cspace, components, alpha);
  }

  /**
   * Multiplies each component of each color by the other
   */
  public Color multiply(Color other) {
    float[] thisRgb = new float[3];
    float[] otherRgb = new float[3];
    getColorComponents(thisRgb);
    other.getColorComponents(otherRgb);
    return new Color(thisRgb[0] * otherRgb[0], thisRgb[1] * otherRgb[1], thisRgb[2] * otherRgb[2]);
  }

  /**
   * Returns the color generated by adding each RGB component of both colors. Will truncate any sum
   * above 1.0 to 1.0.
   */
  public Color add(Color other) {
    float[] thisRgb = new float[3];
    float[] otherRgb = new float[3];
    getColorComponents(thisRgb);
    other.getColorComponents(otherRgb);
    return new Color((float) Math.min(thisRgb[0] + otherRgb[0], .9999999),
        (float) Math.min(thisRgb[1] + otherRgb[1], .9999999),
        (float) Math.min(thisRgb[2] + otherRgb[2], .9999999));
  }

  public Color scaleFloat(float f) {
    float[] rgb = new float[3];
    getColorComponents(rgb);
    return new Color(bound(rgb[0] * f), bound(rgb[1] * f), bound(rgb[2] * f));
  }

  public int[] getRgbaAsInts() {
    return new int[]{
        getRed(),
        getGreen(),
        getBlue(),
        getAlpha()
    };
  }

  public float[] getRgbaAsFloats() {
    // Passing null creates a new float array, rather than passing one in
    return getRGBComponents(null);
  }

  private static float bound(float v) {
    return (float) Math.min(Math.max(v, 0), 1);
  }
}
