package me.kahlil.graphics;

import java.awt.Color;

public final class ColorComputation {

  private Color color;

  private ColorComputation(Color color) {
    this.color = color;
  }

  public static ColorComputation of(Color color) {
    return new ColorComputation(color);
  }

  /** Multiplies each component of each color by the other */
  public ColorComputation multiply(Color second) {
    float[] firstRgb = new float[3];
    float[] secondRgb = new float[3];
    color.getColorComponents(firstRgb);
    second.getColorComponents(secondRgb);
    this.color = new Color(
        firstRgb[0] * secondRgb[0], firstRgb[1] * secondRgb[1], firstRgb[2] * secondRgb[2]);
    return this;
  }

  /**
   * Returns the color generated by adding each RGB component of both colors. Will bound any results
   * to be within 0.0 to 1.0 inclusively.
   * above 1.0 to 1.0.
   */
  public ColorComputation add(Color second) {
    float[] firstRgb = new float[3];
    float[] secondRgb = new float[3];
    this.color.getColorComponents(firstRgb);
    second.getColorComponents(secondRgb);
    this.color = new Color(
        bound(firstRgb[0] + secondRgb[0]),
        bound(firstRgb[1] + secondRgb[1]),
        bound(firstRgb[2] + secondRgb[2]));
    return this;
  }

  public ColorComputation scaleFloat(float scaleFactor) {
    float[] rgb = new float[3];
    color.getColorComponents(rgb);
    this.color = new Color(
        bound(rgb[0] * scaleFactor), bound(rgb[1] * scaleFactor), bound(rgb[2] * scaleFactor));
    return this;
  }

  public Color compute() {
    return this.color;
  }

  private static float bound(float v) {
    return Math.min(Math.max(v, 0f), 1.0f);
  }
}
